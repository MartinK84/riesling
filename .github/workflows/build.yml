name: Build
on:
  push:
    branches:
      - main
      - ducc
      - api2
  pull_request:
    branches:
      - main

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{matrix.config.name}}
    runs-on: ${{matrix.config.os}}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
          name: "Ubuntu GCC", artifact: "riesling-linux.tar.gz",
          os: ubuntu-22.04,
          cc: "gcc-12", cxx: "g++-12"
        }
        - {
          name: "macOS", artifact: "riesling-macos.tar.gz",
          os: macos-14,
          cc: "clang", cxx: "clang++"
        }

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - uses: melusina-org/setup-macports@v1
        if: ${{ runner.os == 'macOS' }}
        id: 'macports'

      - name: Install Dependencies
        shell: bash
        run: |
          if [ "${{runner.os}}" == "macOS" ]; then
          else
            sudo apt-get install -y libmagick++-dev
          fi
          if [ -x "$( command -v Magick++-config )" ]; then
            echo "Found config"
          else
            echo "Did not find config"
          fi
          hash -r
          if [ -x "$( command -v Magick++-config )" ]; then
            echo "Found config"
          else
            echo "Did not find config"
          fi

      - name: Restore vcpkg binary cache
        id: cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/vcpkg/
          key: ${{runner.os}}-${{hashFiles( 'vcpkg.json' ) }}-${{hashFiles( '.git/modules/cmake/HEAD' )}}-vcpkg-cache

      - name: Build
        shell: bash
        env:
          CC: ${{matrix.config.cc}}
          CXX: ${{matrix.config.cxx}}
        run: |
          ./bootstrap.sh
      
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install python package
        run: |
          python -m pip install --upgrade pip
          cd ${{github.workspace}}/python
          python -m pip install .

      - name: Tests
        shell: bash
        run: |
          if [ "${{runner.os}}" != "macOS" ]; then # MacOS runners do not have AVX2, python tests do also only work under Ubuntu (unknown why)
            cd ${{github.workspace}}/build
            ./riesling-tests
          fi

      - name: Tarball
        run: |
          cd ${{github.workspace}}
          mv ./build/riesling ./
          ALL="riesling"
          if [ "${{runner.os}}" == "macOS" ]; then
            echo "Using GNU tar"
            gtar -cvzf ${{matrix.config.artifact}} $ALL
          else
            echo "Using system tar"
            tar -cvzf ${{matrix.config.artifact}} $ALL
          fi
        shell: bash

      - name: Release
        if: contains(github.ref, 'tags/v')
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: ${{github.workspace}}/${{matrix.config.artifact}}
          artifactErrorsFailBuild: true
          bodyFile: CHANGES.md
          draft: true
